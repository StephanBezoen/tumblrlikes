buildscript {

    repositories {
        mavenCentral()
        maven { url rootProject.ext.Repos.fabric }
    }

    dependencies {
        def classpaths = rootProject.ext.ClassPaths

        classpath classpaths.fabric
    }
}

def config = rootProject.ext
def plugins = config.Plugins
def libs = config.Libraries
def repos = config.Repos

apply plugin: plugins.android_app
apply plugin: plugins.fabric
apply plugin: plugins.kotlin
apply plugin: plugins.kotlin_kapt
apply plugin: plugins.kotlin_ext

apply from: "$rootDir/config/config.gradle", to: config

android {
    def versions = config.Versions
    def appConfig = config.AppConfig

    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk

        applicationId appConfig.id
        versionCode appConfig.versionCode
        versionName appConfig.versionName

        testInstrumentationRunner libs.test_runner

        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "CONSUMER_KEY", "\"" + config.consumer_key + "\""
        buildConfigField "String", "PRIVACY_URL", "\"" + config.privacy_url + "\""
        buildConfigField "Boolean", "USE_STETHO", "false"

        if (config.has('blog')) {
            buildConfigField "String", "BLOG", "\"" + config.blog + "\""
        } else {
            buildConfigField "String", "BLOG", "\"\""
        }
    }

    signingConfigs {
        release_keystore {
            storeFile file(config.keystore_file)
            storePassword config.keystore_password
            keyAlias config.keystore_key
            keyPassword config.key_password
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release_keystore
        }
        debug {
            applicationIdSuffix appConfig.debugSuffix
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

androidExtensions {
    experimental = true
}

repositories {
    maven { url repos.fabric }
    mavenCentral()
}

dependencies {
    implementation project(path: ':datalib')

    implementation libs.kotlin
    implementation libs.android_ktx

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // testing
    androidTestImplementation libs.test_espresso
    testImplementation libs.test_junit

    // AndroidX
    implementation libs.androidx_appCompat
    implementation libs.androidx_cardView
    implementation libs.androidx_constraintLayout
    implementation libs.androidx_annotations

    // Rx
    api libs.rxAndroid

    // Retrofit
    implementation libs.okHttp

    // Glide
    implementation libs.glide
    annotationProcessor libs.annotationProcessorGlide
    kapt libs.annotationProcessorGlide

    // Dagger
    implementation libs.dagger
    annotationProcessor libs.annotationProcessorDagger
    kapt libs.annotationProcessorDagger

    // Stetho
    implementation libs.stetho

    // Fabric
    implementation(libs.fabric) {
        transitive = true;
    }

    implementation libs.firebase

    implementation libs.sqlCipher

    implementation libs.timber
}

apply plugin: 'com.google.gms.google-services'